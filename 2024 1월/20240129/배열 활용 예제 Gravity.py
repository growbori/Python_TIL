'''
상자가 쌓여있는 방이 있다. 방이 오른쪽으로 90도 회전하여 상자들이 중력의 영향을 받아 낙하한다고 할 때, 낙차가 가장 큰 상자를 구하여 그 낙차를 리턴하는 프로그램을 작성하시오.

중력은 회전 완료된 후 적용된다.

상자들은 모두 한쪽 벽면에 붙여진 상태로 쌓여 2차원의 형태를 이루며 벽에서 떨어져서 쌓인 상자는 없다.

상자의 가로, 세로 길이는 각각 1이다.

방의 가로 길이는 100이며, 세로 길이도 항상 100이다.

즉 상자는 최소 0, 최대 100 높이로 쌓을 수 있다.

상자가 놓인 가로 칸 수의 N, 다음 줄에 각 칸의 상자 높이가 주어진다.

input()

9
7 4 2 0 0 6 0 7 0

'''

N = int(input()) # 상자가 쌓여 있는 가로 길이

arr = list(map(int, input().split())) # ' '공백 표시 꼭 넣을 필요 없음 (오히려 오류 발생 확률 높아짐)

# arr input().split() 이렇게 작성하면 숫자가 인덱스 형태로 입력됨

max_v = 0 # 가장 큰 낙차 (구하고자 하는 값)

for i in range(0, N-1): # i는 낙차를 구할 위치
    cnt = 0 # 오른쪽에 더 낮은 높이의 갯수
    for j in range(i+1,N):  # i 와 비교하기 위해 지정한 범위
        if arr[i] > arr[j] : # 오른쪽에 있는 값들보다 크면
            cnt += 1
    if max_v < cnt : # 현재의 낙차가 최대 낙차보다 크면
        max_v = cnt # 최대 낙차 갱신
print(max_v) 